// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'app/data/models/objectbox_track.dart';
import 'new/app/domain/entities/album.dart';
import 'new/app/domain/entities/artist.dart';
import 'new/app/domain/entities/track.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 4567172474523976725),
      name: 'ObjectboxTrack',
      lastPropertyId: const obx_int.IdUid(6, 2281026813396061139),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3939920585467893840),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 805499632379490263),
            name: 'artist',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2464926771274860164),
            name: 'album',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3826665281037569057),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6796015340161000018),
            name: 'location',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(1, 1947356258381918388)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2281026813396061139),
            name: 'artwork',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 6334629032870853428),
      name: 'Album',
      lastPropertyId: const obx_int.IdUid(3, 5038218124246525154),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7660622188596593582),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7226763994535470859),
            name: 'artist',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5038218124246525154),
            name: 'title',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 5953606207081290695),
      name: 'Artist',
      lastPropertyId: const obx_int.IdUid(2, 6457087967785666147),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 668493937328284304),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6457087967785666147),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 2045598808023429272),
      name: 'Track',
      lastPropertyId: const obx_int.IdUid(5, 4384596570738127504),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6577218385643939044),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1075810443361945125),
            name: 'artist',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3928235669412314413),
            name: 'album',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5234770567951417312),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4384596570738127504),
            name: 'location',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(2, 3355567844374604927))
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(4, 2045598808023429272),
      lastIndexId: const obx_int.IdUid(2, 3355567844374604927),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    ObjectboxTrack: obx_int.EntityDefinition<ObjectboxTrack>(
        model: _entities[0],
        toOneRelations: (ObjectboxTrack object) => [],
        toManyRelations: (ObjectboxTrack object) => {},
        getId: (ObjectboxTrack object) => object.id,
        setId: (ObjectboxTrack object, int id) {
          object.id = id;
        },
        objectToFB: (ObjectboxTrack object, fb.Builder fbb) {
          final artistOffset = fbb.writeString(object.artist);
          final albumOffset = fbb.writeString(object.album);
          final titleOffset = fbb.writeString(object.title);
          final locationOffset = fbb.writeString(object.location);
          final artworkOffset =
              object.artwork == null ? null : fbb.writeString(object.artwork!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, artistOffset);
          fbb.addOffset(2, albumOffset);
          fbb.addOffset(3, titleOffset);
          fbb.addOffset(4, locationOffset);
          fbb.addOffset(5, artworkOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final artistParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final albumParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final locationParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final artworkParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final object = ObjectboxTrack(
              id: idParam,
              artist: artistParam,
              album: albumParam,
              title: titleParam,
              location: locationParam,
              artwork: artworkParam);

          return object;
        }),
    Album: obx_int.EntityDefinition<Album>(
        model: _entities[1],
        toOneRelations: (Album object) => [],
        toManyRelations: (Album object) => {},
        getId: (Album object) => object.id,
        setId: (Album object, int id) {
          object.id = id;
        },
        objectToFB: (Album object, fb.Builder fbb) {
          final artistOffset = fbb.writeString(object.artist);
          final titleOffset = fbb.writeString(object.title);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, artistOffset);
          fbb.addOffset(2, titleOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final artistParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final object =
              Album(id: idParam, artist: artistParam, title: titleParam);

          return object;
        }),
    Artist: obx_int.EntityDefinition<Artist>(
        model: _entities[2],
        toOneRelations: (Artist object) => [],
        toManyRelations: (Artist object) => {},
        getId: (Artist object) => object.id,
        setId: (Artist object, int id) {
          object.id = id;
        },
        objectToFB: (Artist object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = Artist(id: idParam, name: nameParam);

          return object;
        }),
    Track: obx_int.EntityDefinition<Track>(
        model: _entities[3],
        toOneRelations: (Track object) => [],
        toManyRelations: (Track object) => {},
        getId: (Track object) => object.id,
        setId: (Track object, int id) {
          object.id = id;
        },
        objectToFB: (Track object, fb.Builder fbb) {
          final artistOffset = fbb.writeString(object.artist);
          final albumOffset = fbb.writeString(object.album);
          final titleOffset = fbb.writeString(object.title);
          final locationOffset = fbb.writeString(object.location);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, artistOffset);
          fbb.addOffset(2, albumOffset);
          fbb.addOffset(3, titleOffset);
          fbb.addOffset(4, locationOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final artistParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final albumParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final locationParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final object = Track(
              id: idParam,
              artist: artistParam,
              album: albumParam,
              title: titleParam,
              location: locationParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [ObjectboxTrack] entity fields to define ObjectBox queries.
class ObjectboxTrack_ {
  /// See [ObjectboxTrack.id].
  static final id =
      obx.QueryIntegerProperty<ObjectboxTrack>(_entities[0].properties[0]);

  /// See [ObjectboxTrack.artist].
  static final artist =
      obx.QueryStringProperty<ObjectboxTrack>(_entities[0].properties[1]);

  /// See [ObjectboxTrack.album].
  static final album =
      obx.QueryStringProperty<ObjectboxTrack>(_entities[0].properties[2]);

  /// See [ObjectboxTrack.title].
  static final title =
      obx.QueryStringProperty<ObjectboxTrack>(_entities[0].properties[3]);

  /// See [ObjectboxTrack.location].
  static final location =
      obx.QueryStringProperty<ObjectboxTrack>(_entities[0].properties[4]);

  /// See [ObjectboxTrack.artwork].
  static final artwork =
      obx.QueryStringProperty<ObjectboxTrack>(_entities[0].properties[5]);
}

/// [Album] entity fields to define ObjectBox queries.
class Album_ {
  /// See [Album.id].
  static final id = obx.QueryIntegerProperty<Album>(_entities[1].properties[0]);

  /// See [Album.artist].
  static final artist =
      obx.QueryStringProperty<Album>(_entities[1].properties[1]);

  /// See [Album.title].
  static final title =
      obx.QueryStringProperty<Album>(_entities[1].properties[2]);
}

/// [Artist] entity fields to define ObjectBox queries.
class Artist_ {
  /// See [Artist.id].
  static final id =
      obx.QueryIntegerProperty<Artist>(_entities[2].properties[0]);

  /// See [Artist.name].
  static final name =
      obx.QueryStringProperty<Artist>(_entities[2].properties[1]);
}

/// [Track] entity fields to define ObjectBox queries.
class Track_ {
  /// See [Track.id].
  static final id = obx.QueryIntegerProperty<Track>(_entities[3].properties[0]);

  /// See [Track.artist].
  static final artist =
      obx.QueryStringProperty<Track>(_entities[3].properties[1]);

  /// See [Track.album].
  static final album =
      obx.QueryStringProperty<Track>(_entities[3].properties[2]);

  /// See [Track.title].
  static final title =
      obx.QueryStringProperty<Track>(_entities[3].properties[3]);

  /// See [Track.location].
  static final location =
      obx.QueryStringProperty<Track>(_entities[3].properties[4]);
}
