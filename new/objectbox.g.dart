// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'app/data/models/album_model.dart';
import 'app/data/models/artist_model.dart';
import 'app/data/models/track_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 851174253420961308),
    name: 'AlbumModel',
    lastPropertyId: const obx_int.IdUid(5, 2621303158589088236),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 2396937874168887813),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 5598561889657705286),
        name: 'albumId',
        type: 6,
        flags: 40,
        indexId: const obx_int.IdUid(1, 3080971685889256038),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3899843030103261079),
        name: 'artistId',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 4750327175830714333),
        name: 'title',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 2621303158589088236),
        name: 'artist',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 6518539716666307319),
    name: 'ArtistModel',
    lastPropertyId: const obx_int.IdUid(3, 2586280321946078076),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 8120919714468858430),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 4937079716051924563),
        name: 'artistId',
        type: 6,
        flags: 40,
        indexId: const obx_int.IdUid(2, 6160793247483818969),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 2586280321946078076),
        name: 'name',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 8449443848990624741),
    name: 'TrackModel',
    lastPropertyId: const obx_int.IdUid(8, 7168356560960780143),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 2936486085054047862),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 1951561846735746392),
        name: 'trackId',
        type: 6,
        flags: 40,
        indexId: const obx_int.IdUid(3, 8616268896177070815),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3093328336644156133),
        name: 'albumId',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 374985707524920304),
        name: 'artistId',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 967541538463265758),
        name: 'title',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 2020094502591736181),
        name: 'album',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 8241070750813644139),
        name: 'artist',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 7168356560960780143),
        name: 'location',
        type: 9,
        flags: 2080,
        indexId: const obx_int.IdUid(4, 2969197586417086358),
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(3, 8449443848990624741),
    lastIndexId: const obx_int.IdUid(4, 2969197586417086358),
    lastRelationId: const obx_int.IdUid(0, 0),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    AlbumModel: obx_int.EntityDefinition<AlbumModel>(
      model: _entities[0],
      toOneRelations: (AlbumModel object) => [],
      toManyRelations: (AlbumModel object) => {},
      getId: (AlbumModel object) => object.id,
      setId: (AlbumModel object, int id) {
        object.id = id;
      },
      objectToFB: (AlbumModel object, fb.Builder fbb) {
        final titleOffset = fbb.writeString(object.title);
        final artistOffset = fbb.writeString(object.artist);
        fbb.startTable(6);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.albumId);
        fbb.addInt64(2, object.artistId);
        fbb.addOffset(3, titleOffset);
        fbb.addOffset(4, artistOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final albumIdParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        final artistIdParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        final titleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final artistParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final object = AlbumModel(
          id: idParam,
          albumId: albumIdParam,
          artistId: artistIdParam,
          title: titleParam,
          artist: artistParam,
        );

        return object;
      },
    ),
    ArtistModel: obx_int.EntityDefinition<ArtistModel>(
      model: _entities[1],
      toOneRelations: (ArtistModel object) => [],
      toManyRelations: (ArtistModel object) => {},
      getId: (ArtistModel object) => object.id,
      setId: (ArtistModel object, int id) {
        object.id = id;
      },
      objectToFB: (ArtistModel object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        fbb.startTable(4);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.artistId);
        fbb.addOffset(2, nameOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final artistIdParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final object = ArtistModel(
          id: idParam,
          artistId: artistIdParam,
          name: nameParam,
        );

        return object;
      },
    ),
    TrackModel: obx_int.EntityDefinition<TrackModel>(
      model: _entities[2],
      toOneRelations: (TrackModel object) => [],
      toManyRelations: (TrackModel object) => {},
      getId: (TrackModel object) => object.id,
      setId: (TrackModel object, int id) {
        object.id = id;
      },
      objectToFB: (TrackModel object, fb.Builder fbb) {
        final titleOffset = fbb.writeString(object.title);
        final albumOffset = fbb.writeString(object.album);
        final artistOffset = fbb.writeString(object.artist);
        final locationOffset = fbb.writeString(object.location);
        fbb.startTable(9);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.trackId);
        fbb.addInt64(2, object.albumId);
        fbb.addInt64(3, object.artistId);
        fbb.addOffset(4, titleOffset);
        fbb.addOffset(5, albumOffset);
        fbb.addOffset(6, artistOffset);
        fbb.addOffset(7, locationOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final trackIdParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        final albumIdParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        final artistIdParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        final titleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final albumParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 14, '');
        final artistParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 16, '');
        final locationParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 18, '');
        final object = TrackModel(
          id: idParam,
          trackId: trackIdParam,
          albumId: albumIdParam,
          artistId: artistIdParam,
          title: titleParam,
          album: albumParam,
          artist: artistParam,
          location: locationParam,
        );

        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [AlbumModel] entity fields to define ObjectBox queries.
class AlbumModel_ {
  /// See [AlbumModel.id].
  static final id = obx.QueryIntegerProperty<AlbumModel>(
    _entities[0].properties[0],
  );

  /// See [AlbumModel.albumId].
  static final albumId = obx.QueryIntegerProperty<AlbumModel>(
    _entities[0].properties[1],
  );

  /// See [AlbumModel.artistId].
  static final artistId = obx.QueryIntegerProperty<AlbumModel>(
    _entities[0].properties[2],
  );

  /// See [AlbumModel.title].
  static final title = obx.QueryStringProperty<AlbumModel>(
    _entities[0].properties[3],
  );

  /// See [AlbumModel.artist].
  static final artist = obx.QueryStringProperty<AlbumModel>(
    _entities[0].properties[4],
  );
}

/// [ArtistModel] entity fields to define ObjectBox queries.
class ArtistModel_ {
  /// See [ArtistModel.id].
  static final id = obx.QueryIntegerProperty<ArtistModel>(
    _entities[1].properties[0],
  );

  /// See [ArtistModel.artistId].
  static final artistId = obx.QueryIntegerProperty<ArtistModel>(
    _entities[1].properties[1],
  );

  /// See [ArtistModel.name].
  static final name = obx.QueryStringProperty<ArtistModel>(
    _entities[1].properties[2],
  );
}

/// [TrackModel] entity fields to define ObjectBox queries.
class TrackModel_ {
  /// See [TrackModel.id].
  static final id = obx.QueryIntegerProperty<TrackModel>(
    _entities[2].properties[0],
  );

  /// See [TrackModel.trackId].
  static final trackId = obx.QueryIntegerProperty<TrackModel>(
    _entities[2].properties[1],
  );

  /// See [TrackModel.albumId].
  static final albumId = obx.QueryIntegerProperty<TrackModel>(
    _entities[2].properties[2],
  );

  /// See [TrackModel.artistId].
  static final artistId = obx.QueryIntegerProperty<TrackModel>(
    _entities[2].properties[3],
  );

  /// See [TrackModel.title].
  static final title = obx.QueryStringProperty<TrackModel>(
    _entities[2].properties[4],
  );

  /// See [TrackModel.album].
  static final album = obx.QueryStringProperty<TrackModel>(
    _entities[2].properties[5],
  );

  /// See [TrackModel.artist].
  static final artist = obx.QueryStringProperty<TrackModel>(
    _entities[2].properties[6],
  );

  /// See [TrackModel.location].
  static final location = obx.QueryStringProperty<TrackModel>(
    _entities[2].properties[7],
  );
}
